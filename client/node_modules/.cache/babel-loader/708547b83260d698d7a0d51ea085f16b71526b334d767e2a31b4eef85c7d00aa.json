{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from 'react';\n// Import the `useMutation()` hook from Apollo Client\nimport { useMutation } from '@apollo/client';\n// Import the GraphQL mutation\nimport { CREATE_JOB } from '../../utils/mutations';\nconst JobForm = () => {\n  _s();\n  const [formState, setFormState] = useState({\n    title: \"\",\n    description: \"\"\n  });\n  const [createJob, {\n    error,\n    data\n  }] = useMutation(CREATE_JOB);\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n\n    // Since mutation function is async, wrap in a `try...catch` to catch any network errors from throwing due to a failed request.\n    try {\n      // Execute mutation and pass in defined parameter data as variables\n      const {\n        data\n      } = await createJob({\n        variables: {\n          ...formState\n        }\n      });\n      window.location.reload();\n    } catch (err) {\n      console.error(err);\n    }\n  };\n};\n_s(JobForm, \"lRZV1M5u9u+lZcs8a6hQKloKFzk=\", false, function () {\n  return [useMutation];\n});\n_c = JobForm;\nexport default JobForm;\nvar _c;\n$RefreshReg$(_c, \"JobForm\");","map":{"version":3,"names":["React","useState","useMutation","CREATE_JOB","JobForm","_s","formState","setFormState","title","description","createJob","error","data","handleFormSubmit","event","preventDefault","variables","window","location","reload","err","console","_c","$RefreshReg$"],"sources":["C:/FINALPROJECT/client/src/components/JobPost/index.js"],"sourcesContent":["import React, { useState } from 'react';\r\n// Import the `useMutation()` hook from Apollo Client\r\nimport { useMutation } from '@apollo/client';\r\n// Import the GraphQL mutation\r\nimport { CREATE_JOB } from '../../utils/mutations';\r\n\r\nconst JobForm = () => {\r\n  const [ formState, setFormState] = useState({\r\n    title: \"\",\r\n    description: \"\",\r\n  });\r\n  const [createJob, { error, data}] = useMutation(CREATE_JOB);\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // Since mutation function is async, wrap in a `try...catch` to catch any network errors from throwing due to a failed request.\r\n    try {\r\n      // Execute mutation and pass in defined parameter data as variables\r\n      const { data } = await createJob({\r\n        variables: { ...formState },\r\n      });\r\n\r\n      window.location.reload();\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n};\r\n\r\nexport default JobForm"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC;AACA,SAASC,WAAW,QAAQ,gBAAgB;AAC5C;AACA,SAASC,UAAU,QAAQ,uBAAuB;AAElD,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAAEC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC;IAC1CO,KAAK,EAAE,EAAE;IACTC,WAAW,EAAE;EACf,CAAC,CAAC;EACF,MAAM,CAACC,SAAS,EAAE;IAAEC,KAAK;IAAEC;EAAI,CAAC,CAAC,GAAGV,WAAW,CAACC,UAAU,CAAC;EAE3D,MAAMU,gBAAgB,GAAG,MAAOC,KAAK,IAAK;IACxCA,KAAK,CAACC,cAAc,CAAC,CAAC;;IAEtB;IACA,IAAI;MACF;MACA,MAAM;QAAEH;MAAK,CAAC,GAAG,MAAMF,SAAS,CAAC;QAC/BM,SAAS,EAAE;UAAE,GAAGV;QAAU;MAC5B,CAAC,CAAC;MAEFW,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;IAC1B,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACV,KAAK,CAACS,GAAG,CAAC;IACpB;EACF,CAAC;AAsBH,CAAC;AAACf,EAAA,CA3CID,OAAO;EAAA,QAKyBF,WAAW;AAAA;AAAAoB,EAAA,GAL3ClB,OAAO;AA6Cb,eAAeA,OAAO;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}